%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: modelsinglebody.pdf
%%Creator: Adobe Acrobat 10.1.0
%%For: zhiqiang
%%CreationDate: 2015/11/13, 9:36:52
%%BoundingBox: 0 0 184 137
%%HiResBoundingBox: 0 0 183.0576 136.6687
%%CropBox: 0 0 183.0576 136.6687
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1067 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2015-11-13T09:34:42+08:00"
   xmp:CreatorTool="Acrobat PDFMaker 10.1 Visio 版"
   xmp:ModifyDate="2015-11-13T09:34:45+08:00"
   xmp:MetadataDate="2015-11-13T09:34:45+08:00"
   pdf:Producer="Acrobat Distiller 10.1.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:0ed1a07c-2414-43b2-b607-ff5f34bebd36"
   xmpMM:InstanceID="uuid:2e40f9cb-6d25-4ef2-9c65-706ad45be02b">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>zhiqiang ma</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 9 
/Lookup <~
\#?+7\#6"1[\fh+[AK\%[ABV![A9Lq[%sCm[%j=iZ_O1dZ_F+a~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -136.669 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 136.669 li
183.058 136.669 li
183.058 0 li
cp
clp
gsave
-134.215 755.39 mo
-134.215 683.326 li
-134.151 683.262 li
-134.023 683.326 li
-134.023 755.39 li
-134.151 755.518 li
-134.215 755.39 li
clp
-134.534 682.942 mo
-130.442 682.942 li
-130.442 687.035 li
-134.534 687.035 li
cp
false sop
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -546.274 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 687.035 mo
-130.442 687.035 li
-130.442 691.127 li
-134.534 691.127 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -550.366 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 691.127 mo
-130.442 691.127 li
-130.442 695.219 li
-134.534 695.219 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -554.459 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 695.219 mo
-130.442 695.219 li
-130.442 699.312 li
-134.534 699.312 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -558.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 699.312 mo
-130.442 699.312 li
-130.442 703.404 li
-134.534 703.404 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -562.643 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 703.404 mo
-130.442 703.404 li
-130.442 707.497 li
-134.534 707.497 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -566.736 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 707.497 mo
-130.442 707.497 li
-130.442 711.589 li
-134.534 711.589 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -570.828 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 711.589 mo
-130.442 711.589 li
-130.442 715.681 li
-134.534 715.681 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -574.92 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 715.681 mo
-130.442 715.681 li
-130.442 719.774 li
-134.534 719.774 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -579.013 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 719.774 mo
-130.442 719.774 li
-130.442 723.866 li
-134.534 723.866 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -583.105 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 723.866 mo
-130.442 723.866 li
-130.442 727.958 li
-134.534 727.958 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -587.198 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 727.958 mo
-130.442 727.958 li
-130.442 732.051 li
-134.534 732.051 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -591.29 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 732.051 mo
-130.442 732.051 li
-130.442 736.143 li
-134.534 736.143 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -595.382 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 736.143 mo
-130.442 736.143 li
-130.442 740.235 li
-134.534 740.235 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -599.475 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 740.236 mo
-130.442 740.236 li
-130.442 744.328 li
-134.534 744.328 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -603.567 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 744.328 mo
-130.442 744.328 li
-130.442 748.42 li
-134.534 748.42 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -607.659 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 748.42 mo
-130.442 748.42 li
-130.442 752.513 li
-134.534 752.513 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -611.752 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 752.513 mo
-130.442 752.513 li
-130.442 756.605 li
-134.534 756.605 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -615.844 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E8=a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
false sop
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiFTL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1.50053 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
6.14069 13.6492 mo
6.14069 130.154 li
false sop
0 0 0 .871855 cmyk
@
2.11227 14.6084 mo
6.14069 2.5871 li
10.1691 14.6084 li
2.11227 14.6084 li
ef
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
6.14069 130.154 mo
165.231 130.154 li
@
164.208 126.125 mo
176.293 130.154 li
164.208 134.182 li
164.208 126.125 li
ef
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
69.5723 33.2158 mo
74.1123 11.731 95.2135 -1.95288 116.634 2.5871 cv
138.055 7.19098 151.739 28.2283 147.199 49.7132 cv
142.659 71.1342 121.558 84.818 100.137 80.278 cv
78.6523 75.738 64.9684 54.6368 69.5723 33.2158 cv
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
108.322 41.4005 mo
100.073 80.2141 li
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB')~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
6.20465 130.154 mo
161.651 47.4751 li
@
158.901 44.4058 mo
171.434 42.2957 li
162.674 51.5035 li
158.901 44.4058 li
ef
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
100.073 80.214 mo
73.1531 29.571 li
@
70.0839 32.3206 mo
67.9098 19.7877 li
77.1815 28.5479 li
70.0839 32.3206 li
ef
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
4.79785 130.154 mo
4.79785 129.386 5.43729 128.747 6.26854 128.747 cv
7.03587 128.747 7.67531 129.386 7.67531 130.154 cv
7.67531 130.985 7.03587 131.624 6.26854 131.624 cv
5.43729 131.624 4.79785 130.985 4.79785 130.154 cv
eclp
4.73392 131.646 mo
7.67531 131.646 li
7.67531 128.704 li
4.73392 128.704 li
cp
gsave
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 9 
/Lookup <~
!!!#]!!!#]!!!#\!!!#[!!!#Z!!!#Y!!!#Y!!!#X!!!#W!!!#V~>
>>
/CSD add_res
grestore
/76684304.0 
<<
/ID /76684304.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
-1e-6 128 mo
32 128 li
32 0 li
-1e-6 0 li
cp
false sop
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[32 0 0 128 -135.621 8.66864 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,fR'0F/!o!Wg/'?pGhM*!HF45eqW;*"`ti!anhq4<bLKLVtB6=L;Np"G4JK:q1=*,nl0U,;H\JG#ofQ
8EM[AUo"S[QG]Qi8X,f,.Z_qe;&U_N;)Y5kBQL\s)J_lsc6uViV&"DSXO=+kg3"Hd;4Q)bP<+,$=]2Co
C:3q]C6pW[>j\tH%DpY@[TTBWgJ-\hJZIZ[pf_P#"[Kh2X4P!*0"6>JeYh))[?!+c`Fj'K4FNtXP-X(g
Q7X/U2iu$_o2Z:-h]%C'l*f=u#-T8\g"ge=N@(]7Vr2K<qn*.=6c7D`\D++Z(NY8jD_disY.JDBichn:
rmmF@bg6"ZRbjB<CYe^YqAc,/TAd<UGr`O@?\dY2[P-D#pUuX+!:7Ks1^O+Hc?o3U_+t0.#.Mqf+R-Ve
/"I$`&A-a)5*1]bo"u#D-Om\Le+jEgO[K!Z`Gm_%'#YA-57t^dUi?o00XIl&_m0+LoLMf#I.9bU%$;#j
P$Cp$`\FQ9)o;(rR/=kMA75M];<3K`8ho,'-d-KDX!^@+S>daJnk>N2b4/HA0hi;1eK@TUUrb^Ao9@KX
:K'r(4A6EYcT"^B*;_-\e-*)q;,_TF5KQkn"Y%f^oQ<OJ1USGed?LHu8'A4Z0/$4&eCR=A["U5'bd?1H
0[l:4kt=t*I8`tn<Fp#Nes2dF?W]34LJc^47?:$l[T,b.<H`MSBN$eMUM<gCj`_B2+9~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/76684304.0 /Pattern get_res
[0 -.0925903 -.0231476 0 7.63466 131.568 ]make_pattern set_pattern
f
2 vmreclaim
grestore
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'a~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
106.979 41.4645 mo
106.979 40.6332 107.618 39.9938 108.386 39.9938 cv
109.153 39.9938 109.793 40.6332 109.793 41.4645 cv
109.793 42.2318 109.153 42.8712 108.386 42.8712 cv
107.618 42.8712 106.979 42.2318 106.979 41.4645 cv
eclp
106.915 42.8925 mo
109.793 42.8925 li
109.793 39.951 li
106.915 39.951 li
cp
gsave
grestore
/76684500.0 
<<
/ID /76684500.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
1e-6 128 mo
32 128 li
32 0 li
1e-6 0 li
cp
false sop
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[32 0 0 128 -135.621 8.66864 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,fR'0F/!o!Wg/'?pGhM*!HF45eqW;*"`ti!anhq4<bLKLVtB6=L;Np"G4JK:q1=*,nl0U,;H\JG#ofQ
8EM[AUo"S[QG]Qi8X,f,.Z_qe;&U_N;)Y5kBQL\s)J_lsc6uViV&"DSXO=+kg3"Hd;4Q)bP<+,$=]2Co
C:3q]C6pW[>j\tH%DpY@[TTBWgJ-\hJZIZ[pf_P#"[Kh2X4P!*0"6>JeYh))[?!+c`Fj'K4FNtXP-X(g
Q7X/U2iu$_o2Z:-h]%C'l*f=u#-T8\g"ge=N@(]7Vr2K<qn*.=6c7D`\D++Z(NY8jD_disY.JDBichn:
rmmF@bg6"ZRbjB<CYe^YqAc,/TAd<UGr`O@?\dY2[P-D#pUuX+!:7Ks1^O+Hc?o3U_+t0.#.Mqf+R-Ve
/"I$`&A-a)5*1]bo"u#D-Om\Le+jEgO[K!Z`Gm_%'#YA-57t^dUi?o00XIl&_m0+LoLMf#I.9bU%$;#j
P$Cp$`\FQ9)o;(rR/=kMA75M];<3K`8ho,'-d-KDX!^@+S>daJnk>N2b4/HA0hi;1eK@TUUrb^Ao9@KX
:K'r(4A6EYcT"^B*;_-\e-*)q;,_TF5KQkn"Y%f^oQ<OJ1USGed?LHu8'A4Z0/$4&eCR=A["U5'bd?1H
0[l:4kt=t*I8`tn<Fp#Nes2dF?W]34LJc^47?:$l[T,b.<H`MSBN$eMUM<gCj`_B2+9~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/76684500.0 /Pattern get_res
[0 -.0925903 -.0231476 0 109.767 42.8254 ]make_pattern set_pattern
f
2 vmreclaim
grestore
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB(L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
gsave
98.3467 79.7025 mo
98.3467 78.9352 98.9861 78.2958 99.7535 78.2958 cv
100.521 78.2958 101.16 78.9352 101.16 79.7025 cv
101.16 80.4698 100.521 81.1092 99.7535 81.1092 cv
98.9861 81.1092 98.3467 80.4698 98.3467 79.7025 cv
eclp
98.2828 81.1305 mo
101.16 81.1305 li
101.16 78.2531 li
98.2828 78.2531 li
cp
gsave
grestore
/76684696.0 
<<
/ID /76684696.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 32 128 ] 
/XStep 32 
/YStep 128 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
1e-6 128 mo
32 128 li
32 0 li
1e-6 0 li
cp
false sop
/1 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[32 0 0 128 -135.621 8.66864 ]ct
snap_to_device
<<
/T 1
/W 32 
/H 128 
/M[32 0 0 -128 0 128 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~J,fR'0F/!o!Wg/'?pGhM*!HF45eqW;*"`ti!anhq4<bLKLVtB6=L;Np"G4JK:q1=*,nl0U,;H\JG#ofQ
8EM[AUo"S[QG]Qi8X,f,.Z_qe;&U_N;)Y5kBQL\s)J_lsc6uViV&"DSXO=+kg3"Hd;4Q)bP<+,$=]2Co
C:3q]C6pW[>j\tH%DpY@[TTBWgJ-\hJZIZ[pf_P#"[Kh2X4P!*0"6>JeYh))[?!+c`Fj'K4FNtXP-X(g
Q7X/U2iu$_o2Z:-h]%C'l*f=u#-T8\g"ge=N@(]7Vr2K<qn*.=6c7D`\D++Z(NY8jD_disY.JDBichn:
rmmF@bg6"ZRbjB<CYe^YqAc,/TAd<UGr`O@?\dY2[P-D#pUuX+!:7Ks1^O+Hc?o3U_+t0.#.Mqf+R-Ve
/"I$`&A-a)5*1]bo"u#D-Om\Le+jEgO[K!Z`Gm_%'#YA-57t^dUi?o00XIl&_m0+LoLMf#I.9bU%$;#j
P$Cp$`\FQ9)o;(rR/=kMA75M];<3K`8ho,'-d-KDX!^@+S>daJnk>N2b4/HA0hi;1eK@TUUrb^Ao9@KX
:K'r(4A6EYcT"^B*;_-\e-*)q;,_TF5KQkn"Y%f^oQ<OJ1USGed?LHu8'A4Z0/$4&eCR=A["U5'bd?1H
0[l:4kt=t*I8`tn<Fp#Nes2dF?W]34LJc^47?:$l[T,b.<H`MSBN$eMUM<gCj`_B2+9~>
/LZWDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/76684696.0 /Pattern get_res
[0 -.0925903 -.0231476 0 101.129 81.1024 ]make_pattern set_pattern
f
2 vmreclaim
grestore
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6*"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
/2 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
.852 sep
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.332 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32f710b77c000000cc000000606376
742008fab09e0000012c0000079c6670676d4d5f5868000008c800000634
676c7966352a0d8b000082cc00000f7e68656164e074353600000efc0000
0036686865610e310ee000000f3400000024686d74784f8cd97a00000f58
00002fe46c6f636100b523dc00003f3c00002fe86d617870119304140000
6f24000000206e616d652ea380a700006f440000086b70726570ab1cb91f
000077b000000b1b67646972000000000000000000000000000303370190
00050008059a0533002c0125059a0533004c03a000660212010502020503
050405090304e0000eff400078430000000100000000544d432000010020
fffc058efe460133072101bb400001bfdff700000371054c000000200004
058e0000054c001f054c001c037100180000ffe10000ffe80000ffe8fe4a
fffc056b0023fe68ffe2033e000000950000009500000000000000000025
00a8008e010b007d00820045003200a400ca006b0070005100af003c00f0
01d700470004002500770029004000fd00160161004601370029008e0017
ffca0025005bffe902e600020099008100f2007500d6006300c60006009a
01330024003800cc003dff67001305d8003600860095ffdb0007043400a5
00d8ffdcfffe004800a200d8013c01530380053e0057007a007c008c0117
012a0138017c0026003c007800bd00c0021009b5000c004d004e00540058
006700b4040100020005005000af01d5034300240058008b013501c0ffac
002000250026002d00410136022bffba001e002a0034003b003f00850094
009800d7012e013d033104b900170040006100b9010e0116012201bfff9c
001f001f004d005c0086008c009600aa00cb00cb011f0154022f036005a9
fee8000e006f007c007d008b00d500f1010a0157017802b803adfe3fff6a
ffb3ffc4001f0037003f0044004a0078007d009700a200a700b600c000c1
00c600d8011d0150019701ee04740532fd81fed1fee0ff16fff1000f002d
00550068006e007f00890095009e00c200da00e400f801040108011101c2
023002da030e049e0517ff00ff8700000020002f00410057007800870088
008800b900c200c5012001280133017401d6020e020f026c027e02ab02ec
038903b103e304e7ff43ffa8ffc3ffdcffe9000700230023002600520077
007d0081008f009900ac00ae00b500b800c800ea00f000f40135016a018b
01b101b501f7021402ad02d504fc05d805f0ff9dfffc000b00240025002c
0030003000330040004700490057006e009a00bd00c900cd00dc00fa00fa
011b0139017e0187018a018e0195019601df01f6028602cf02de039603a9
03b003c804010432046a058b05e006510761fe96fe9aff4bff8700130025
00340038003e004a0065006b0073007a009c00a200b200b700bf00f000f7
00fb0104011301200124013b01520178017c0181018f01a001d90248026a
026f02700301031d032303270388041f04ab04d104da057a058bfe26fe59
ff2e00010002000a003b003b004700580058005f0066006b007a007a008b
009900af00bc00c000c700cc00e900f200f500fb00fb0102010a010b0115
0121012701450145015501570158015e01610168017d01a301ab01da01ee
021002180222028f029402a302d202e703710393039b03b303d303fe04ff
050b05320532054b0559058b05ab05f2065506890742076207a708ccfd2a
fdc8fddefe0cfe15fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffaf
ffc00000000000030094001d001f002000200027002e0048004b004c005e
005f006b0071007c008a00900091009100a700af00b300b400c400c600d1
00d200de00df00df00e600e800ea00eb00f200f500f500fc010201180123
013101330137015c016201660170017a017a017a018201980199019b01b0
01bf01c001ca01d301d701d801e001e001f601f701f802120213022f0237
02440247024f0252026302650270027f0298029b02a602b702ba02c502cf
02d602d702e502fe031c031d03450348035d035e03710379038103a103b7
03d403d503d803e103f803fe0404041f042104230425043a0467048304e0
0528054b0564056a059f059f05c2060b066a06af06b306cb06e807060728
0748075007a607b207ff009500af00920096000000000000000000000000
017e01a80129025b0212020301c302b4019301cd02b204ed020e0159017a
0300022d042c00c8004d00e602890325013e0378011b00f1018d00490203
007c000e029d02470024000000000052004400330038005405d3041501a7
000002860168005000cf0002004b0024008800ba0025ffd800110091ff6b
00b5011700260065ff9900490080014b01c000f40167027102ea04fc0310
017c01e103d9015501e601ee0434019606cb005c022b0099003d009f0016
0039002700de00790120022e005a00990388009400210019002a046c05e8
000001f203b200aa0296028902b4ffc9020000ec0005005a0447010004e0
0000052a001f01eb00ae016800ca02d3028901b5040601a1014f014b011c
0308005e00c70024029d006503750104028002f304d800d90239025a032c
01f204310303005002e50283005901eb010800ac019602f8012100950180
004400e501eb02e5007400f301ff02fd038f026801c801c70116022b0142
033000fe02e101620200002400ee05170108023700660006010201e602aa
0366019b00d305c203dc044d03b6000401be013702fc03200244014d0338
ffed002506f8030dfed5ff43004402ffff92040bfdef0155017100d9ffc4
032d0461044afbb5fbcf02170192036d0558fff2fe7d0583023e006605e9
073d00790243002500cf00fd00af002a01ef021a0026001f0025003a0000
01170490fbfb0251001d02f001f50078018f005f00240044005400bf00af
006701a8002600050006003f009800fa02ab00c2004d0375004a00b600c4
01bf017c006f00130263000c006801520002012e0104001f001f009a0000
00f1046900790080005000bd056b00ab0080001e05a5fe4000ce006e0056
004800db018b00b3004802390458005300820082002203d703f104704042
5554403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524
232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706
0504030201002c4523466020b02660b004262348482d2c452346236120b0
2661b004262348482d2c45234660b0206120b04660b004262348482d2c45
23462361b0206020b02661b02061b004262348482d2c45234660b0406120
b06660b004262348482d2c4523462361b0406020b02661b04061b0042623
48482d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d
44235920b0ed51582320b04d44235920b09051582320b00d44235921212d
2c20204518684420b001602045b04676688a4560442d2c01b10b0a432343
650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b102
17453ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0
004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a
8cb8100062602b0c642364615c58b00361592d2c45b0112bb0172344b017
7ae4182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b017
7ae41b038a45186920b01723448a8a8720b0a05158b0112bb0172344b017
7ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c01
182f2d2c20b0032545b019234445b01a23444565234520b00325606a20b0
09234223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a
54582321b03f1b235961441cb114008a5279b31940201945208a54582321
b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d
4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143
2343650b2d2c4b525845441b2121592d2c0120b003252349b04060b02063
20b000525823b002253823b002256538008a63381b212121212159012d2c
4bb06451584569b00943608a103a1b212121592d2c01b005251023208af5
00b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b006
2510f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c
2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76
b802ee23701020b802ee4520b0005058b00161593a2f182d2c21210c6423
648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b0
02602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c
0c6423648bb84000626023212d2cb4000100000015b00826b00826b00826
b008260f10161345683ab001162d2cb4000100000015b00826b00826b008
26b008260f1016134568653ab001162d2c4b53234b515a5820458a60441b
2121592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121
592d2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab903b003b08a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b12601885158b94000020063b80400885458b20240
0243604259b94000040063b80800885458b202800243604259b128018851
58b94000080063b81000885458ba00020100000243604259595959595959
2d2cb0024354584b53234b515a58381b2121591b21212121592d00010000
0006deb81a06977f5f0f3cf50819080000000000a31fb8bd00000000cf71
5306fc05fd8c0aaa0830000000090001000100000000000100000721fe45
00570a3afc05fa500aaa001800070000000000000000000000000bf90639
011c00000000020000000200000002aa009a035c01260400009304000056
06aa00900639006201b6010d02aa008c02aaff2104000122056600be0200
ffeb02aa0036020000450239ffbb0400007a0400007d0400002004000044
040000400400004904000081040000e80400004e0400003b02aa007a02aa
002405660096056600c805660096040000c6075c006104e3ff9c04e3ffd1
0556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca02aaffc0038d
ffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3ffcf05c70061
04e3ffd10400000e0473008f05c700da04e3010006aa00f904e3ff770473
00b80473fffc031d000d023900da031dff33036000380400ffef02aa0168
0400003004000036038d003804000027038d00400239fe9b0400ffc90400
0029023900580239fea0038d00140239004f05c70023040000270400003c
0400ff1e0400002d031d002a031dffed023900540400003c038d002c0556
0023038dffb8038dff5c031dffc70333008d023300ed0333ff6704540014
04e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a05c700da0400
00300400003004000030040000300400003004000030038d003c038d0040
038d0040038d0040038d0040023900580239005802390058023900580400
00270400003c0400003c0400003c0400003c0400003c0400003c0400003c
0400003c0400003c040000dd033300d404000072040000310400fffc02cd
00ad042f006c0400feb70614008b0614008b07d700be02aa019902aa010c
04640019071dff9405c7004805b40035046400350464005e0464005a0400
fff2049cffd203f4004005b4002b069600920464004802310000023500b2
027b00e40625005b0556002d0400000504000049031d0090056600960464
0054040000020464001e04e5ffc40400005404000025071d010a04e3ff9c
04e3ff9c05c7007a078d002d055600360400ffee071dffed0473018a0473
017502aa01b202aa01910464003503f4002f038dff60047300b70156feab
0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3020000d202aa
00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3ffd204e3ffd2
02aaffc002aaffc002aaffc002aaffc005c7007a05c7007a05c7007a05c7
00da05c700da05c700da0239005802aa00fe02aa00c602aa00f602aa0126
02aa01c102aa017d02aaffdb02aa012f02aa001102aa01520473ffc60239
00330400000e031dfff00473fffc031dffc7023300ed05c7ffd004000037
047300b7038dff6004e3ffcf0400ff1e056600960566017a026600a30266
006f02660084060000a1060000a1060000820400ffce05c7008e0400ffc9
02aaffc00400000e031dffed0556008a038d003c0556008a038d003c0400
0027040000c502ab01ee04e3ff9c0400003004e3ff9c0400003005c7ffc3
04de002705c7ffd004e3ffd2038d004004e3ffd2038d00400473ffbe0239
004f0473ffbe02e9004e0473ffbe029500490556ffc7040000270556ffc7
0400002705c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a0400
000e031dffed0473008f0239ffbd0473008f02e9005605c700da0400003c
05c700da0400003c0473fffc031dffc70473fffc031dffc7048dffb605c7
007d0617009d0433003c03b800300327001603f2003602dd0033046d004a
0400ffef0495009a0285001407eb002f0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c700c0056600c604cd0099
0566009804d5022204d5010505abffe904ed01c005ab027e05abffe905ab
027e05abffe905ab027e05abffe905abffe905abffe905abffe905abffe9
05ab01c005ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905ab02d605ab006605abffea05d5ffff04d500920800
000007eb013007eb012007eb013007eb012004d500b204d5008004d5002a
082b0198086b01b807550010060000f40600006f0440003a0540003704c0
003f0415004004000025060000550600ffc30401004b049e007301c0010d
0355012606ab006c0355001e04d5009202d6008302d6008304d500b202d6
007004e3ff9c040000300556008a038d003a0556008a038d003a04e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004005c7008e0400ffc905c7
008e0400ffc905c7008e0400ffc805c7ffca0400002905c7ffca04000029
02aaffc00239005402aaffc00239005802aaffc00239005402aaffc00239
ffc6038dffba0239fea00556ffc9038d0014038d00140473ffbe0239ffb6
0556ffc7040000270592ffc003db002705c7007a0400003c05c7007a0400
003c04e3ffd1031dff980400000e031dffed04730093023a003105c700da
0400003c05c700da0400003c05c700da0400003c05c700da0400003c06aa
00f905560023047300b8038dff5e0239fe9d04e3ffa504000030071dff94
0556002d05c700480400000502aa014d06aa00f90556002306aa00f90556
002306aa00f905560023047300b8038dff5e02aa01bd02aa00b704000031
04cd005a060000a10600008206000084060000e802aa004c02aaffdb02aa
019902aa00b404e3ff9c056f005d065600590337004d05c7007a0548005e
05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd20473fffc05c7
ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051dfff205c7007a
05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff7705a0011305c9
001b02aaffc0047300bc0433003c0327001603f8003a0239005503ac0035
03fcff7703270031033d002f03f8003a03ee005a0239005503d7001f0377
ffc00404ff94038d002c036d00250400003c03d7ff6f033f003f03ac0035
0385ff4004f8008f05a600480239005503ac00350400003c03ac00350595
003f04e3ffce066000c1048dffb6055a008e0400000e02aaffc002aaffc0
038dffba076bffbb075effc2066400c60550ffc7056200e105c7ffcd04e3
ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754ff9003f6fffe
05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca05c7007a05c7
ffc504e3ffcf0556008a0473008f056200e1066f009504e3ff7705c7ffcc
058300e70858ffe40858ffe40568007606faffc604b8ffc6053d001e0842
ffbe0542ff9104000030040600490379003f031f0002040c003d038d0040
0771ffff031fffce0400003c0400003c03be0025037dffa5051bffa403f8
00290400003c040000270400ff1e038d003805c70023038dff5c05ae003c
038dffb80400003c03d10056060a0040060a00400427003c056b006603a4
00660387000f05a4002a03b8ff84038d003c03d500280304ffaa037d0036
031dffed02390058023900550239fea0056fffa605b2002a0400002903be
0025038dff5c040000250385ffc30285005608000041078bffa804020032
0000fefb0000ff3a0000ff380000ff380000ff3a0000ff3a0000ff3a0000
ff380000ff38000000770000ff3a000000f70000feb502f700c00000fff3
02aa005f0000037a0000003602aa007a03d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00bf0208002903c4fffa03d3005901ef00c6038000c1
0349ffc7037000c703c8ffe403c3ffde020b004a023cff9d03b1006b0383
ffcd0372004f036effd5039000c50397fff0038eff8f039500bc04f500c2
03cbff85043800bf040b00c603de00c60186009b02f1009b064c0010021c
00bf038000c10380009c0370000a0370000a0383ffd104f500c204f500c2
04f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc50291ff7e0357
00bd03ceffd1021c00670225000303d3005901ef0067038000c10349ffc7
037000c703c3ffde023cff9d03b1006b0372004f036effd50397fff0038e
ff8f039500bc04f500c203cbff85021c00bf037fffc50349ffc7036effd5
0448004a0000ffdc0000ff250000ffdc0000fe510400005a0800000005c7
007a0445003c060800da045d003c0000ff1a0000fdf20000fdb40000ff91
0000fef60000fee40000ff780000ff8a0000fe880000fefb0000fea20000
fe6e0000fdf4000000350000001f0000fe47041a0078060000a10600006f
0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe380000fdcd0000
fd190000fce70000fd710000fd3f0000fcf90000fccd0000fc050000fc05
0000fc550000fc0f0000ff190000ffa20000fe310000fc550000fcef0000
fd9c0000fdda0000fca10000fd530000fcef0000fcb30000fd0d0000fcb3
0000fdba0000fd940000fd7e0000fd300239005804e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d0040
02aaffc00239005802aaffc00239003105c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a
0400003c05c7007a0400003c05c7007a0445003c05c7007a0445003c05c7
007a0445003c05c7007a0445003c05c7007a0445003c05c700da0400003c
05c700da0400003c060800da045d003c060800da045d003c060800da045d
003c060800da045d003c060800da045d003c047300b8038dff5c047300b8
038dff5c047300b8038dff5c04e3ff9c0400003002aaffc00239005805c7
007a0400003c05c700da0400003c05c700da0400003c05c700da0400003c
05c700da0400003c05c700da0400003c000000be000000be000000be0000
00be048dffb6031f00020754ff900771ffff0550ffc703be00250550ffc7
03be002505c7ffca03f80029047300b804000003047300b80400ffdf04e3
ff77038dffb8058300e703d100560583ffca04000029058f007a038d001b
05c7007a0400003c01ef00b70000ffd50336ffea03de006204000036054b
003904b8ffc60400003604b8ffc604000036055600330556008a038d0038
05c7ffd0063d003904b800260400002703b8000804e3ffe603f6003b04e3
fecd05c7008e05a30100060e00290239004f02aaffc00556ffc9038d0014
0239004a0377ffc0064500870556fecd03f8003a05c7007a0766008e0568
003c054d00390400ff1e04e3ffcf04000013031d001604c1ffb90222004f
0239ff5e0473008f02390054047300cd05c9007a056f00da049d00dd0416
ff5c0473fffc031dffc70453ff5d0453ffdd038dffad038dfff004000020
03b200490311ffb30296ffed042eff1e019a00a1023f00a101fe000a02aa
009a0a3affc308e4ffc3071d00270800ffbe06acffbe0472004f08e6ffc7
078fffc706390027038d001b04e3ff9c04000030000000f304e3ff9c0400
0030071dff940556002d05c7008e0400ff6d05c7008e0400ffc90556ffc9
038d001405c7007a0400003c05c7007a0400003c0453ff5d038dff6a0239
fea00a3affc308e4ffc3071d002705c7008e0400ffc90794ffca04c7ff41
0556ffc70400002704e3ff9c0400003004e3ff9c0400003004e3ffd2038d
004004e3ffd2038d004002aaffc00239002102aaffc00239005805c7007a
0400003c05c7007a0400003c04e3ffd1031d002a04e3ffd1031d002a05c7
00da0400003c05c700da0400003c0400000e031dffed0473008f0239ffd4
04f2ff940321ff4905c7ffca040000290546ffc404e50033045100500473
fffc031dffc704e3ff9c0400003004e3ffd2038d004005c7007a0400003c
000000b305c7007a0400003c05c7007a0400003c05c7007a0400003c0473
00b8038dff6003890048040000300400003004000036038d0011038dffb6
0400002704000027038dffdf04bd001b03270016031fffce0467ffce03bf
003a0239fea00400ffcd0400ffcd03f5003c03cf005803a700750400003c
04000029040000290239000b023900580226ffc6023900460239004f0239
0006046b004805c7003c05c7003c05c700230400fe8404000027040fffe8
0400003c0563003c05a600480456003c031dffdc031dffdc031dffdc031d
ffab031dfffc02df002702df0091038effc603d6ffc6031dffa8024bfea0
024bfea002040014024bfec80239fff702390006040000070429003d03eb
0035038d001205560013038d001203050038031dffc7031dffc7038dff6a
038dffbe034a0007034a007c034a00000389ffe905c7007a0370ffc603bf
000603f5003c0418ffc60239fe9c038dffbd031effc60400002d034a0007
034a007c060c0027065c0027060a0027047b005a0395ffea051d005405cf
fe9b045c004f041a004f041d004603d9ffc00245006f0245006f0151ffa9
01c7006f01c7003d01c7003d02470040031d0081020a000801b6010d035c
012602aa01b202aa019102aa01bd02aa01dd02aa01dd022d00cb022d00e2
0566002705660025056600c4056600c402aa020702aa019902aa016802aa
00a302aaff5902aaffff02aafff6023900610239013302aa00f702aa00f7
02aa00a602aa00a602aa00a602aa000802aa0003030e0105025700aa0117
006f01b000560242005a022d00e203100096031000960310009603100096
0310009602aa006202aa006202aaffbe02aa00ae04730175045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000ff9a0000ff890000fef40000ffe8
000000720000ffcf0000001b0000fffd000000090000008f0000001f0000
ff6a0000ffe80000ffe8000000500000002a00000074000000e80000fec0
0000fea30000fea30000fea30000ff7a000000ad0000feed0000fea30000
fea30000fea30000fdfd0000fe5f0000ffd40000fe370000fea60000fe9a
0000fe8b0000ff380000ff3b0000fdfa0000fe2c0000fe7e0000fde70000
fe570000fdfd0000fe0c0000fe0a0000fd250000fe2f0000fefe0000fee5
0000fe170000fefa0000fe910000feed0000fdfa0000fead0000fe1c0000
ffe5000000650000fef40000fff00000004f0000ff990000002a0000ff55
0000fef80000ff5c0000fd180000fec00000fea30000ff9a0000ffcf0000
ff8d0000fe060000fea30000fd1f00000046000000460000ff530000ff6b
0000ff750000ffff0000ff5b0000ff600000ff740000ff6a0000ff5a0000
fece0000ff9a0000fffa0000ff770000ff4302aa019902aaff9b02aa0041
03fc003d03ed0000051700b506120064051700b50424003c05a6001f047f
000305c7007a0400002d055600a0038e002c04e3ffce03b5ffa70422004d
039c002d059d00b6042d00a10645fffd05c7fff704a5007a042700970630
ffca037effa3045600320456003204f6ffed04320048059b007603f5003c
0322fffc02b6000c047f0003040f00070391003c0239fea405c7007a0339
003c0339ffa104e3ffd205c7ffcc038d00400400003c0916007a0517009b
056600740556002707b2ffc00564ffc60593ff8f0456ff960827ffc00640
ffc606d9ff740516ff840981ffc00714ffc603f6ff56031fff2d05a000db
04f8007005c7007a0400003c055c01000471002c055c01000471002c08dd
007a071b003c06420052049c00280916007a0676003c0000fe370916007a
0517009b0556008a038d0038023cffbb0000ff760000ffae000000640000
003c0000fc2b0000fc4c05c7ffcc0400003c04b8ffc603a4006604e3ffcf
0400ff1e0516ffb6038effaa03f6fffe031fffa40550ffc703be002505ff
00760438003c06f2ffca04fa00290822ffc5058700270556008e038d003a
0556008a038dfff40473009005c7002305c7ffcc0400003c058300e703d1
005606840040045f000106840040045f000102aaffc00754ff900771ffff
0550ffc703be0010056bffb9037dffa505c7ffca03f8ffbc05c7ffca03f8
0029058300e703d1005606aaffbd051bffa4044801cd04e3ff9c04000030
04e3ff9c04000030071dff940556002d04e3ffd2038d0040058f007a038d
001b0754ff900771ffff03f6fffe031fffce03f6fffe038dff6a05c7ffcc
0400003c05c7ffcc0400003c05c7007a0400003c05c7007a0400003c053d
001e0387000f056200e1038dff60056200e1038dff60056200e1038dff60
058300e703d1005606faffc6056b006604b80047040000270669004705a2
0027063700ea052d0082042800ea031f0082073affb90526ffa50794ffca
0590002905c7008e03f5003c056e00cd075a00230000fe2a000000030000
002400000073000000000000fe3e000000630000ffb80000ff730000ff84
0000fe4f000000110000010e0000ffb70000ff35000000020000000d0000
fe6a0000fe8a0000fe400000fde00000fe7900000063000000240000fe55
0000005a0000002d0000ff380000fec00000006500000042000000a30000
00a3000000b3000000b3000001440000010d000000a304e3ff9c04000030
04e3ffd10400003604e3ffd10400003604e3ffd1040000210556008a038d
003c05c7ffc30400002705c7ffc30400002705c7ffc30400000d05c7ffc3
0400002705c7ffc30400000304e3ffd2038d004004e3ffd2038d004004e3
ffd2038dffc704e3ffd2038d000004e3ffd2038d004004e3ffce0239fe9b
05c7008e0400ffc905c7ffca0400002905c7ffca0400002905c7ffca0400
002905c7ffca0400ff9f05c7ffca0400002902aaff880239ff7402aaffc0
023900580556ffc9038d00140556ffc9038d00140556ffc9038d00140473
ffbe023900130473ffbe023900130473ffbe0239ff4f0473ffbe0239feff
06aaffbd05c7002306aaffbd05c7002306aaffbd05c700230556ffc70400
00270556ffc7040000270556ffc70400fff90556ffc70400000305c7007a
0400003c05c7007a0400003c05c7007a0400003c05c7007a0400003c04e3
ffcf0400ff1e04e3ffcf0400ff1e04e3ffd1031d002a04e3ffd1031d002a
04e3ffd1031d002a04e3ffd1031dff090400000e031dffed0400000e031d
ffed0400000e031dffed0400000e031dffed0400000e031dffed0473008f
023900540473008f02390013047300350239ff59047300170239fef505c7
00da0400003c05c700da0400002805c700da0400000305c700da0400003c
05c700da0400003c04e30100038d002c04e300b3038d002c06aa00f90556
002306aa00f90556002304e3ff77038dffb804e3ff77038dffb8047300b8
038dff600473fffc031dffc70473fffc031dffc70473fffc031dff810400
ffe50239005405560023038dff60040000300239fe9d0433003c0433003c
0433003c0433003c0433003c0433003c0433003c0433003c04e3ff9c04e3
ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3ff9c03270016
032700160327001603270016032700160327001605ab008d05ab009a06d7
007f06d700b906d7007f06d700b903f8003a03f8003a03f8003a03f8003a
03f8003a03f8003a03f8003a03f8003a068f008d068f009207bb007f07bb
00b907bb007f07bb00b907bb00d007bb00d0023900580239005802390043
02390058023900580239005802390058023900580372008803720088049e
007f049e00b9049e007f049e00b9049e00d0049e00d00400003c0400003c
0400003c0400003c0400003c0400003c068f00c9068f00f507bb007f07bb
00b906f3007f06f300b903ac003503ac003503ac003503ac003503ac0035
03ac003503ac003503ac0035053b009106cb00b906cb00b906cb00d005a6
004805a6004805a6004805a6004805a6004805a6004805a6004805a60048
069100c9069100e307bd007f07bd00b906f5007f06f500b906f500d006f5
00d00433003c0433003c032700160327001603f8003a03f8003a02390058
023900580400003c0400003c03ac003503ac003505a6004805a600480433
003c0433003c0433003c0433003c0433003c0433003c0433003c0433003c
04e3ff9c04e3ff9c054700000547000004e3ff9c04e3ff9c04e3ff9c04e3
ff9c03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb03f8fffb
03f8fffb068f008d068f009207bb007f07bb00b907bb007f07bb00b907bb
00d007bb00d005a6004805a6004805a6004805a6004805a6004805a60048
05a6004805a60048069100c9069100e307bd007f07bd00b906f5007f06f5
00b906f500d006f500d00433003c0433003c0433003c0433003c0433003c
0433003c0433003c04e3ff9c04e3ff9c04e3ff9c04e3ff9c04e3ff9c02aa
019102aa004102aa019102aa00c602aa010c03f8fffb03f8fffb03f8fffb
03f8003a03f8fffb060f00fe060f00d106f300f606f300d105c7ffca02aa
00e302aa00e302aa013402390058023900580239003c0239003c02390058
0239005802aaffc002aaffc003d600ec03d600d102aa011d02aa011d02aa
013403ac003503ac003503ac003503ac003503d7ff6f03d7ff6f03ac0035
03ac0035047300b8047300b806030104060300d105ab009702aa00b402aa
00b402aa016805a6004805a6004805a6004805a6004805a6004806f30104
05c7007a06f5010405c9001b05c9001b02aa019902aa01bd04ef00ba0556
008a0556008a05c700230556ffc70871ffd106aa00590556ffc90473008f
0800ffbe0400ffad04c10066000000460000004600000046000000460239
000b0239fea00400ffc404e3ffcf040000270239ff40040000270239ffb6
044affe3044affe302aafffd02aafffe02aa002402aa003402aa000202aa
009502aa001402aa002102aaff6c02aa00ff02aa019f02aa019102aa000a
02aaffef032effa6032effa402aaffb000000033000000680000ffb60000
fea60000feed0000fee70000fe1a0000006800000046000000460000fe0a
04e3ffcf0400ff1e0330ff900491ff900556002d0343ffc7039d003c0411
ffc60411ffc6031fffc6031fffce023900090307002a03abffc60332ffda
04ccffda040bffc60400003c03c8003c042a003c042a003c0497003c0556
00360385003c03ee003c03ee003c0346ffc603efffc603370014030a0044
03ec00840471006a057d008004ef00b7035e008c049e008c0337fff102d1
ffdc033600000466ffba032dffc60331ff900403ffc60346ffc603f60092
03a2ffbc0354006304940063035b0089035a008903d60089034100890341
008f03a400de02dbfffa0217008902b900a803f200830332008204880084
03ac008a03f3008503cd00de02b200ad031f0082037b0084031700f203fe
0138048b014d033000e7033000e7033000e7032800850227006a027b0089
021900870219008601e4007801e40070024900350144005b0240006f0356
006e022a006e0249007b0214007202490083024900780243ffda01580098
02580085028b009103720085023d008a02d900690246000301d80080023b
00830271007d0227fff80144000a01f8ffe20258ffe9023dfffc0246ff72
01d8ffe00246ffc90271ffdc0227ff5d0509ffd5048300bd04faffd10475
ffc7049c00c704f4ffe404cb00bc04f7ff85048300250000ff3a0000ff38
0000ff380400ffee0473018a035c00db0400000008000000040000000800
000002ab000002000000015500000400000002000000019a000000ab0000
000000000556008a06aaffbd04ccff5f05cf003c060500270608002d04e3
ff9c0556008a040000720473ffbe0473ffa5031dffed031d000403e50061
000001cf0000feb60000fe140000003c0000ffcb03d7ff340556008a0556
008a0556008a048dffb6031f00020000fe54000000770000fee40270ffd3
0000ff3804000036040000270239fe9b05c7000b040000140400fefa031d
ffae02dfff9f031dffed0239ffcf031dffc70400ff750258002803c5ffaa
059affc30226ffc60239000b0400ff1e03ec00290429ffe3040000360400
002702d6fe9b04bbffc9038d00140239ffac05c70023040000270400ff1e
031dff1a031dffed02d1fea0038d002c038dffb8031dffc7040000300400
003004000027038d004003270016031fff65038d001b02390058038dffa6
024bfec40400003c038dffad033000e7021a007b021a002f0252007b01e4
00700164ff960164ffaf0288007b0258008d0144006b0144009301440048
014400480144ff970144006b0144002b01c5002c032b0065032b0072022a
ff61022a006f022a00340249007a027b007b01cf00310164ff9c01580001
0258006a0262007b025800aa02580083023d008101ef005601ef0057021b
005601effff2024900910000ff510000ff540000fee10000ffa002aa007a
0257ffed0219ffe30249ffe50246ffcb0219ffe005c7008e04e3ff9c0400
00130556008a02aaffed0433003c0433003c0433003c0433003c0433003c
0433003c0433003c0433003c023900580239005802390058023900580239
005802390058023900580239005803ac003503ac003503ac003503ac0035
03ac003503ac003503ac003503ac00350239005802390058023900580239
005803ac003503ac003503ac003503ac0035037d003804e3ffd105c70066
04d5ff8f04e3ffd2038d0040038dffba0239fea005aa008e0400002d04e3
ffd1031d0015047300a2038dff5c039100140391003c039100140239004f
048dffb6031f000204e3ff77038dffb804e3ff77038dffb803f6003b037d
0017056bffb9037dffa50000ffbe0000ffb50000ffdc0000ff950000ff54
0000ff330000febc000000500000fe1a070e0020031fffde039100140473
ffbe023900350473ffbe04e3ffcf04e3004c040000300239ff9005c7ffca
040000290556ffc9038d00140473fffc031dffc7038d003a04ccffca0345
0029046d004a0000006a000000a6000000270000000a0000ffa70000fe6e
023900580592ffc00556ffc70592006e0000fecc0000ff1c0000fee20000
fef70000fedd0000fee60000fec50000fefa0000fee50000fec50000feb2
05c700610400002d06aa00f9055600230579ffb10000ff8305be007a0474
002c06aa00f90665002302aa00b0033d007701b600a201b600f004000099
0400009902aa018102aa017b02aa010a02aaff7404730077040000910400
005a02f2001e03df001103cfffe60400001703aeffd504180084040000b4
0400006b04180036043900970323001404000020039f00260400004003c0
00290400008103b800be0400004e0400003b023900580471fe980695fea9
0692feab0435fe9c068afea903c9ff8803e2ffbc0434004e04a8ffbc03a9
ffbc036cffbc0476004e04c7ffbc0257ffbc0298ffc30462ffbc038affbc
0533ffbe049affc70476004903b3ffbc04760048040affbc0334fffe03a8
006f049b009603c3007605dc008b0405ff9903f6008b0405ffc90548ffa6
05dc0049038affbc0476ffe703b3ffbc04a8ffbc0466ffb003c9ff8803c9
ff8803c9ff8803c9ff8803c9ff8803c9ff880434004e03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0257ffbc0257ffbc0257ffbc0257ffbc049affc70476
004904760049047600490476004904760049049b0096049b0096049b0096
049b009603f6008b03c9ff8803c9ff8803c9ff880434004e0434004e0434
004e0434004e04a8ffbc04a8ffbc03a9ffbc03a9ffbc03a9ffbc03a9ffbc
03a9ffbc03a9ffbc0476004e0476004e0476004e04c7ffbc0476004e04ac
ffbc0257ffbc0257ffbc0257ffbc0257ff8f0257ffbc04b2ffbc0298ffc3
0462ffbc038affbc038affbc038affbc038affbc049affc7049affc7049a
ffc7047effbc047600490476004904760049040affbc040affbc040affbc
0334fffe0334fffe0334fffe0334fffe0334fffe03a8006403a8006f03a8
006f03b20079049b0096049b0096049b0096049b0096049b0096049b0096
05dc008b05dc008b05dc008b05dc008b03f6008b03f6008b03f6008b0405
ffc90405ffc90405ffc903c9ff880548ffa60476ffe703c9ff8803e2ffbc
0356ffbc03d7ffb403a9ffbc0405ffc904c7ffbc047600480257ffbc0462
ffbc0414ffab0533ffbe049affc703e3ffd00476004904c1ffb603b3ffbc
03b3ffbf03a8006f03f6008b047f00350405ff9904a400bd048dffc503c9
ff8803a9ffbc04c7ffbc0257ffbc04760049048dffc503f6008b0257ffbc
03f6008b03a9ffbc04c200720356ffbc0437004e0334fffe0257ffbc0257
ffbc0298ffc305a3ffad05c8ffbc04ba0069044affbe0435005504c8ffbe
03c9ff8803cbffba03e2ffbc0356ffbc045cff4d03a9ffbc05b0ffa5035c
ffe804c6ffbe04c6ffbe044affbe045bffad0533ffbe04c7ffbc04760049
04c1ffb603b3ffbc0434004e03a8006f04350055048600350405ff9904c9
ffb6044c00a5068dffcd0694ffcd0491007905b1ffba03ccffba04370013
0659ffbc0437ff890356ffbc02560056025600850256004a025600540256
00480256004a02560052025600a60256004c025600560256005602560085
0256004a02560054025600480256004a02560052025600a60256004c0256
005604cf003007bdffc407bdffc407bdffc407bdffc407bdffc407bdffc4
07bdffc406b4003c0513007a0513007a0749003c06ad003c06ad003c06ad
003c06ad003c06ad003c0664003c05cb008d0794ffc40487003c0487003c
0487003c0487003c0487003c048effc40723003c050dffe7050dffe709d7
ffc407bcffc407bcffc405a7007905a7007905a7007905a7007905a70079
05a70079062b0054062b00540672003c05c7007d06e6003c043dffb5043d
ffb505a2003c06eb003c06eb003c06eb003c06eb003c06eb003c0612003c
0811003c0673ffc404ad007c04ad007c04ad007c04d9fff104d9fff10759
005e07bdffc407bdffc407bdffc40513007a0513007a0513007a0513007a
0749003c06ad003c06ad003c06ad003c06ad003c06ad003c05cb008d05cb
008d05cb008d05cb008d0794ffc40794ffc40487003c0487003c0487003c
0487003c0487003c048effc40723003c050dffe7050dffe7050dffe7050d
ffe707bcffc407bcffc407bcffc405a7007905a7007905a7007906e6003c
06e6003c06e6003c043dffb5043dffb50400000e0400000e05a2003c05a2
003c05a2003c05a2003c06eb003c06eb003c06eb003c06eb003c06eb003c
06eb003c0811003c0811003c0811003c0811003c04ad007c04ad007c04d9
fff104d9fff10723003c0774008f0884003c0428ffca031c003c0473008f
0423007b05c7006204400027052effc9040000c60400006b0400fffd07db
ffb90553ffa5074cffcf058fff1e0781ff910591ff840556ffc903d7001f
07f2ffb90504ffa5084cffca0577002905c7ffc5040000270583ffca0400
00270239fe9b0239fe9b03b800300688ffc00438004f046b007a03ae003c
04fdffce03bbfec306aaffbd04e3010a05be003704700040031dfff10400
003c031fffe60151fefa035e010b0400000e0473fffc0239ffc60400ffab
05c500d40590ffa605d400c405f30049058100d405c4002904faffb0059e
ffa60722ffa806170055054fffb00412ffb00770ffb005de0089059a00e4
04b7ffd005cf004d05c4004905c1002f068500d505aa007b05a200b90587
005e05b8ffa6059300cb06a4003f05b5001b0657ffa605b800d505e90053
052f005b0570ffa605860068047dffb5063f0088066f000605e800800679
00670199013201fe01430154008d00f7009001a8009201da0065047501d9
05c9003e03cfff200420003f03fe002903e800410416003d0339001803fa
ffaa0516ff200442004703fdff2001ffffae05f5ff2003fc004603c80047
03e7001703d7003a03fd002903d40039040c003b01d3fe8403e6004702e9
ff0d03fa00290239ff2c05b5003c037eff670438002903fa003b03f8003d
05e0003c03faff2003d1fff70287002d05c5003b042aff2a040d00400575
003704b100410239007a02f400bf077a0045077a00450616004907f2003b
07f4003b0809003b07de003d0a01003b0000ff7d0291ff7e035700bd03ce
ffd103cbff850000003a0000ffc80400ffda000000000000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000002440000024400000244000002440000024400000244
000002440000024400000244000002440000024400000244000002440000
024400000244000002440000024400000244000004700000069200000692
000006920000069200000692000006920000069200000692000006920000
069200000692000006920000069200000692000006920000069200000692
00000692000006920000081c0000081c0000081c0000081c0000081c0000
081c0000099a0000099a0000099a00000be400000be400000be400000dbe
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e0000
0f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e00000f7e
00000f7e00000f7e00000f7e000100000bf900f2003c0097000600020010
002f0056000004ed0258000400020000000e00ae0000000300000000021a
000000000003000000070076021a0001000000000000010d029000010000
00000003001f039d0001000000000004001f03bc0001000000000006001f
03db0001000000000007003b03fa0003000104090000021e043500030001
04090001002c06530003000104090002000e067f0003000104090003003e
068d0003000104090004003e06cb0003000104090006003e070900030001
040900070076074700a90020003200300031003400200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e0020000d000d
0048006500620072006500770020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200063
006f0070007900720069006700680074002000a900200032003000300033
0020002600200032003000300037002c002000520061006c007000680020
00480061006e0063006f0063006b002000260020004a006f0068006e0020
0048007500640073006f006e002e002000540068006900730020006c0061
0079006f007500740020006c006f00670069006300200066006f00720020
004200690062006c006900630061006c0020004800650062007200650077
0020006900730020006f00700065006e00200073006f0075007200630065
00200073006f00660074007700610072006500200075006e006400650072
00200074006800650020004d004900540020004c006900630065006e0073
0065003b002000730065006500200065006d006200650064006400650064
0020006c006900630065006e007300650020006400650073006300720069
007000740069006f006e00200066006f0072002000640065007400610069
006c0073002e00540069006d006500730020004e0065007700200052006f
006d0061006e00200069007300200061002000740072006100640065006d
00610072006b0020006f006600200054006800650020004d006f006e006f
007400790070006500200043006f00720070006f0072006100740069006f
006e002ea9203230313420546865204d6f6e6f7479706520436f72706f72
6174696f6e2e20416c6c205269676874732052657365727665642e200d0d
486562726577204f70656e54797065204c61796f7574206c6f6769632063
6f7079726967687420a92032303033202620323030372c2052616c706820
48616e636f636b2026204a6f686e20487564736f6e2e2054686973206c61
796f7574206c6f67696320666f72204269626c6963616c20486562726577
206973206f70656e20736f7572636520736f66747761726520756e646572
20746865204d4954204c6963656e73653b2073656520656d626564646564
206c6963656e7365206465736372697074696f6e20666f72206465746169
6c732e4b46494d454c2b54696d65734e6577526f6d616e50532d4974616c
69634d544b46494d454c2b54696d65734e6577526f6d616e50532d497461
6c69634d544b46494d454c2b54696d65734e6577526f6d616e50532d4974
616c69634d5454696d6573204e657720526f6d616e206973206120747261
64656d61726b206f6620546865204d6f6e6f7479706520436f72706f7261
74696f6e2e00a90020003200300031003400200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e00200041006c006c00200052006900670068007400
73002000520065007300650072007600650064002e0020000d000a000d00
0a0048006500620072006500770020004f00700065006e00540079007000
650020004c00610079006f007500740020006c006f006700690063002000
63006f0070007900720069006700680074002000a9002000320030003000
330020002600200032003000300037002c002000520061006c0070006800
2000480061006e0063006f0063006b002000260020004a006f0068006e00
200048007500640073006f006e002e002000540068006900730020006c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
770020006900730020006f00700065006e00200073006f00750072006300
6500200073006f00660074007700610072006500200075006e0064006500
7200200074006800650020004d004900540020004c006900630065006e00
730065003b002000730065006500200065006d0062006500640064006500
640020006c006900630065006e0073006500200064006500730063007200
69007000740069006f006e00200066006f00720020006400650074006100
69006c0073002e004b00460049004d0045004c002b00540069006d006500
73004e006500770052006f006d0061006e00500053005200650067007500
6c00610072004b00460049004d0045004c002b00540069006d0065007300
4e006500770052006f006d0061006e00500053002d004900740061006c00
690063004d0054004b00460049004d0045004c002b00540069006d006500
73004e006500770052006f006d0061006e00500053002d00490074006100
6c00690063004d0054004b00460049004d0045004c002b00540069006d00
650073004e006500770052006f006d0061006e00500053002d0049007400
61006c00690063004d005400540069006d006500730020004e0065007700
200052006f006d0061006e00200069007300200061002000740072006100
640065006d00610072006b0020006f006600200054006800650020004d00
6f006e006f007400790070006500200043006f00720070006f0072006100
740069006f006e002e0000>
<410c005403cd02b0001d001f03cd03cd03cc03cb003c001f03cbb3061d1f
00410c03bc003003bc004003bc00a003bc00b003bc0005ffc003bbb34545
3240b803bbb32b2e3240b803bbb2282932b9ffc003bbb31a263280411303
bb009f03bb00af03bb00cf03bb0004000003bb001f03bb000203bb02af00
27001fffc003b9b2161b32b9ffc003b8b2424232b9ffc003b8b2363832b9
ffc003b8b32a2d32df410a03b800ef03b8000203b803b90028001fffc003
b9b3282e32f0410f03b90001000003b7000103b700030800001f03be03bf
002b001fffc003bfb2242a32b903b60381b23a1f0f411703b3001003b200
2003b2005003b2007003b200e003b2000600cf03b300df03b300ef03b300
ff03b30004001203a8b2e2891fbe039f016b019a001f039800930801400c
1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8ffc0b365
1a6632b9ff800173b2196632bd038401170800001fffc002afb2313340b8
02afb22e3340b802afb328293240b802afb326273240b802afb321253240
b802afb31c203240b802afb2233340b802afb21933a0bc02af00b002af00
e002afb5034003212932b8fff2b33a263d32bc038203820382003a0800b5
1f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e3269be
03810001008a03810001000e0381b32b2f3210b80381b3515b320cb80381
b34e513222b80381b3474d320eb80381b246330ab8038140092647321225
4358320cb80381b2323310b80381b22a3312b80381b3373d3212bb038100
3d0033fff44015253d331825355b32102526343206252a330c252e33b8ff
fe4024252d330c3a2f33329925aa25ba25c92504052536330c2532383219
3a293a383a03182517b80381b42825382504bc0381038103810025080040
101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc03800380
0380001f080040151f375f07af07025f06af060222ac2b2e3209ac2f33b8
ffdc400aac1f223222232b52320eb8037fb229330eb8037fb2223314b803
7fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232262c33
410affee037f00390033fff8037f002b0033ffea037fb23a3320b8037fb3
3f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320eb8037f
b2263304b8037fb3494a3404b8037fb2463304b8037fb2213318b8037f40
0c1d3322263032322226333832b8fff8400a262b2f3209261b21328abe03
7f0001037f037f037f00260800402e1f371f062f063f06039f02af02bf02
cf02049f03af03bf03cf03046f037f038f03031f032f033f034f035f0305
0f413a02ed0001005f02ed009f02ed00df02ed0003002f02ed003f02ed00
6f02ed000300af02af0001004f02af009f02af0002002f02af003f02af00
02003f02b00001000f02b0001f02b00002004f02af005f02af0002002f02
af003f02af0002007003b2000103b203b202ed02ed02b002b002af02af40
1a3701003001400102010100090102000800171700000012110840410b02
7b02230034000d013d0034000d01370034000d011b401a340d8f340d8434
0d68340d59340d54340d48340d2c340d28340d411002350020000d021b00
20000d01fc0020000d01c30020000d01500020000d012c401a200df0200d
be200d94200d79200d6a200d61200d5f200d44200d410d013e0138000d00
3d0138000d00300138000d001d0138000d01fdb40f4d0f0009bf01fd004d
000d03b1037f0015001f0215b226341fb80214b2263f1fb80208b21ebb1f
41190206001e0801001f0205001f02ab001f0204001f02ab001f0203001f
0401001f02010031019a001f01fb00230156001f01aeb2262a1fb801adb2
262a1fb801abb226341f411501a8002602ab001f01a5001e0125001f01a4
00ab02ab001f01a2003102ab001f01a1003102ab001f019db2236c1fb801
9cb2236c1f4109019b00230401001f019a0033019a001f0176b2262e1fb8
016cb231721f4111016b0023019a001f016800240401001f014500260801
001f013f00230401001f0123b21e9e1fbc0121001e0201001f0100b42679
1ffd1fb80125b21ffa33b80801b21ff924b802abb21fe826b80101b21fe5
1fb8019ab21fe431b80101400b1fe331e41fe231891fd226b80201b61fd0
26cd1fcd25b80401b21fb731b8019ab21fae26b80801b21fac1eb8040140
0b1f9e315e1f97269e1f9333b80801b21f8a24b8019ab21f831fb802ab40
131f82236c1f7523e41f7026cd1f6423721f5e25b80401b21f5d23b802ab
b21f55e6b80401b21f5324b80201b21f4f33b802abb21f4e26b804014013
1f4731671f4626ab1f4331cd1f3e235e1f3a1fb80401b61f3924e41f3723
b80801b21f2e23b80401b21f2a1eb80125400b1f2923ab1f2731ab1f5537
bc01c60007018a0007012b402e077f077107690766074b07400738073607
2d07220721071408120810080e080c080a080808060804080208000814b8
ffe0402b0000010014061000000100060400000100041000000100100200
0001000200000001000002010802004a00b013034b024b5342b0372b4bb8
07ff52b0382b4bb009505b58b101018e59014bb0c063004b6220b0f65323
b8010a515ab005234201b0124b004b544218b0382bb00288b801005458b8
01ffb101018e851bb0124358b900010140858d1bb900010159858d595900
16763f183f123e113946443e113946443e113946443e113946443e113946
60443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d594bb0475320
5c58b9027d027b4544b9027c027b45445958b90146027d455258b9027d01
464459594bb04753205c58b9001e027c4544b90026027c45445958b9017f
001e455258b9001e017f4459594bb05e53205c58b9001f027d4544b90025
027d45445958b901a8001f455258b9001f01a84459594bb8010153205c58
b1ab1f4544b11f1f45445958b9047000ab455258b900ab04704459594bb8
012553205c58b1e61f4544b11f1f45445958b9051000e6455258b900e605
104459594bb01753205c58b124244544b1312445445958b12224455258b1
24224459594bb05153205c58b124244544b1232445445958b17d24455258
b1247d4459594bb06e53205c58b124244544b1332445445958b1aa244552
58b124aa4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b50
58b108004259435c58b1080042591610703eb0124358b911b53d801bba01
1c03d9000b2b59b00a2342b00b2342003f3f182b103c012f5d060cb00623
42b0072342b0124358b93b21187e1bba040001a8000b2b59b00c2342b00d
2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b4bb0
2e5358b8016b45b02a60b8016b2344590018456944456944184569444569
44737373737375757573737475757575752b4bb026534bb03d515a58b126
2645b0196044592b45186944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b004bb02a534bb03f515a58b1070745b040604459
73732b2b451869442b2b752b2b4518694475752b2b752b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b74752b2b2b2b2b451869442b002b732b2b2b2b2b
2b2b2b2b012b2b2b007373732b2b2b01435c58b8ffdeb31e1c3318b8037f
b52b3318262b33b9fff00381b112332b2b2b2b590173742b2b2b002b7375
2b2b732b2b2b2b2b73752b2b2b2b73002b2b4569442b2b0000>
[3967 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 1136 60 <000100b800000556054c0030017db9002effde40c513390d010f020c030c
070c080f0c0f0d0f0e0d0f8c018c038c078c088c0d8c0f0f9f019f029f03
9f069f079f089d0a9f0b9f0c9f0d9f0e9f0f93130d3240193a340822aa20
a62dbb02b314b52e069b03ab03a0090389018a03962e03480169016d0203
080f091d081a211b1d1a2830291d280701061d071911181d192723261d27
2111100004221a281011111e2122142121220f01000023100f1410100f00
303000001e222314222223000130230f0104323130230103072222192827
0807021a19080032b80291b6100911d2220921b8ffc0b3193a3421b80286
400921312822102121310aba0173012600182b2b103c012f2b3c2b10c001
f62b2bc401fd2bc401e6192f18003f3c3f3c3c3c1912392f121739011112
173908872e182b0e7d10c408872e182b870e7dc4870e2e182b7d10c42b11
121739180010ed0110c00010ed0110c00010ed0110c00010ed0110c00010
ed0110c00010ed0110c0b10602435458b2340f01005d593130015d5d5d5d
2b0172712b01013635342627372107060706070607010306151416171617
07213736373637363713032626273721070607060615141702cc0102642b
650a01aa083e1724232f59feb46425171d264e0afdc50c551c2d16222477
912741510a01f50c5e0d161c1d02d101698d27161d06252508090f202a7b
fe36feb17e301f200a0c012525020c121e2e77018c01d47c3c0725250705
072a1c296300>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
2 0 0 <0002011c0000051c050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121011c04
00fc2003c0fc400500fb002004c0>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/Y 60 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 89 /Y put
pop
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT /PBAAAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[89{/.notdef}rp /Y 166{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
12.0235 12.6897 mo
(Y)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB-#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 580 59 <0001ff77000005ed054c003f015c401a89049b04ab0403181656106d21a7
33b533050808081637180335b8ffde40460f394140193034404019303406
060717171618180517171828282729291606060507363637353509282829
3636353737270105021d010f16101d0f2e352f1d2e0f001f000200b8011b
4063393f1d000e090d1d0e2118201d21002d012d292c1d2d393628251706
06414039362817060500223509091e162914161629053727272318051418
180537352919181609050841403735291816090507002225a9232f222e2d
01000223882222210f0e08ba01ea021900182b003f3c3c3c10ed3f3c3c3c
012ff4e400111217390111121739870e2e2b870e7dc4870e2e182b7d10c4
00111217390111121739180010ed0110c05d0010ed0110c00010ed0110c0
0010ed0110f55d0010ed0110c00010ed0110c00010ed0110c00710083c08
3c8710087dc40ec4083c871008c4083c8710083c08c43130012b2b2b5d5d
005d012107060607011316171e0217072137363736353427030106070615
141716170721373637363701032626273721072206061514171337363736
3534272627042201cb0b61917dfea0630e261830494a0bfdec0b52241b1a
5ffec25d120b1e0e470afe3d0b55364f8b018a6c31495b0a01e50c432f19
185cd57e2f11131b4a054c250e5985fe98fe95346d463a1f032525031c14
201c5f0155febf5f1e12111e1308092525081f2f8c018c0187b453062525
1123161858feb2d47e4d1b15170d1203>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/X 59 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 88 /X put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 166{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
167.022 125.549 mo
(X)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E63%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 2076 85 <0001002a0000033d0389002900f9404102180c3921180c39510155035e09
5e0a5229aa03ac0faa18a51a09851a951aff2b0389049904021e1f1f0100
4521ea282930004d01021420021f0201212f0d010db8019f402214250606
010728011f01001f1f202114202021201f0a282120103009400950090309
ba0240001f0203b229c920b8ffc0402e17392040343d3420402c35204024
352040223520401f203420401c1d3400200100209f20bf20d020ef20ff20
0620b80188b52b2017324c182b2b10f45d712b2b2b2b2b2b2be4fde45d2b
103c2b3f3c87052e2b087d10c42b183f003c10fde45d0111123911390011
123910f5ed2bfc01f5870e7d10c43130005d015d5d2b2b13250312373633
321615140706232226272627262322070607060706070607072313363534
27262322076b015990af8f5133212622182d1721040207080b110f1a3553
612a1e2a062099b9200f14211538035138fe1a012b77442725423c2d1e1f
130608080e40629c425372177e026d6c2e120c100900>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/r 85 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 24{/.notdef}rp /r 141{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
97.7712 56.1071 mo
(r)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB?)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 3044 91 <0001ffb8ffe8038003890046010840630d40120b3f0700072a003d013e14
001601240023014a1b56018919a301a919aa2aa83daf3f10484010351017
63217321c919cb210509230c2a52230304191a1a022a2a2b3e403e3c4028
2122021a1a1f2840142828403e2a1904041135428a46c60011b80395401f
153a0a0a000735c639272e2e260b042a193e218a9f22cf220222c90d02e4
45ba014700400124b21a8228b8019f401d19e43e403b4b343e401d353e3e
47200d400d8f0daf0d040d1a48321947b80114b1de182b4e10e410e65d12
392f2b2b4dedf4edf4e6ed10f45ded11123939003f3c10fde43f3c10fde4
10f4ed11121739870e2e2b0e7d10c40110c90708103c083c870e10c4c431
30005d5d012b5d2b01161716173736363736333216151407062322272623
220706071316163332373637170607062322272603020706232227263534
363332171633323736363726272626232207350163311912295823642618
1d2b330f1c2415182f1018213e5652131a0d151c3727233f613726382115
429c5e3d392821182c2020241a0e0c132fa2193e05174a48171e03893434
2499843057100a2e21260e1909101c3495fea84f1f172e4a12764e2c3f27
0129fef14e321d1625212c20171026fc38f30e4136022400>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/x 91 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 120 /x put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 24{/.notdef}rp /r 5{/.notdef}rp /x 135{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
166.063 58.0254 mo
(x)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6W1~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 3518 92 <0001ff60fe460386038900380113405b9b310131183a3509191a1929193d
19a602b402ba1ab428b832c603c604ca19ca1a0d491b591b691b03043130
2f2f051d2b1e1a311a1104302f2e2d2b281c1b08213105060708090a0b0c
081704358a38c614000724c92b271e0f21b801c040373111400b12340f11
1f110211280c751740170e3f9017a0170250178017b01703201730174017
0317493a3849bf37013f374f375f370337b80323400d04e531401c113f31
401e123f31b8ffc040172529349031a031ef310350318031022031303140
310331b8021cb33932de182b10f65d5d5d2b2b2bedf65d5de410f45d5d5d
2bfde45d2b10e4003ffdec3f3cf4ed011112173911121739111239001239
111239870e7d10c404c43c3130015d5d2b01720116161713363736373637
3635342e0235343633321615140600070606232226353436333217161617
163332373637363703262623220727014b221a0d2c3c723751310b060e3b
2730242c3e6cfeccdb9792341f2f4126140d0813080507060f3749602e38
0e384215360903893a6594fe14489c4c83502010110b0e13332129324940
4fcbfe5cf8ab592f1f274009052f08050a224a623e027a9d44062500>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/y 92 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 24{/.notdef}rp /r 5{/.notdef}rp /x /y 
134{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
61.6433 25.9259 mo
(y)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiC2A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 1682 79 <0001004fffe80261058e001d0129404a09000112001f011f401a35540054
1cef1ff917040a200b300b400b500b040b1d45155a281c301d4d00000003
001d031f1215141212150f0b121e28151210200b300b400b500b040b6c0a
ba01bb001d0124400c032512001201c012d0120212b8013b400a1e091217
121e0a774c182b2b103c2b2b10f65d71435c58b90012ffc0b3170e3f12b8
ffc0400932193f124028143f12b8ffc0b325163f12b8ffc0401323153f12
4021143f1240170e3f1240101b3f12b8ffc0b30f193f12b8ffc040090e17
3f12400d163f12b8ffc0b51839124016392b2b2b2b2b2b2b2b2b2b2b2b2b
5901ede4f4ec5d2b103c2b10c0003f870e2e2b087d10c400183ff5ed2bfc
01f500105dc93130015d2b0171435c58400b0b40170e3f0a40170e3f01b8
ffdeb123392b2b2b59015d01010615141633323736371706070623222635
34370136353426232207350261feaa19130e131634391e5f503b35263320
010f212628172f058efb5a59140f141129561f8635263422247003aa7311
181f0725>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/l 79 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 108 /l put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 18{/.notdef}rp /l 5{/.notdef}rp /r 5{/.notdef}rp 
/x /y 134{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
46.3609 103.873 mo
(l)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!lDdia~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+TimesNewRomanPS-ItalicMT)
%%Title: (HIBBAA+TimesNewRomanPS-ItalicMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+TimesNewRomanPS-ItalicMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-498 -307 1333 1023} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 3065 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD1638113E4B58C0B5F39100186722805B704AA398
8900AFCFF05DD> |
537 <001C60D8A8C9B7500429806B3CC3CECBF4DCF29C0F0C82434F579D345F1
26384A4209A082268F024BEA92B9EEC1DA480B64FE380ED6D63DA9C32895F036
573ED01479229C835A4A0710EB0D9CBB07E04E7496DA9FDCFCAFC9D3C323150E
286D3CE113FB80E69EDB11118B8630C55A22E8E102E59FA093D0EEBA7AD821F2
215C748118A471F7275ACF016B3F67C0347B2BBE79749D1B9AE8B3DE490BFE4A
82D30B369> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H /Identity-H 0 [/HIBBAA+TimesNewRomanPS-ItalicMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/WCDYEF+TimesNewRomanPS-ItalicMT /HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H findfont ct_VMDictPut
WCDYEF+TimesNewRomanPS-ItalicMT [9.9751 0 0 -9.9751 0 0 ]msf
32.8049 127.979 mo
(\002\031)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!eQ&WL~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/HIBBAA+TimesNewRomanPS-ItalicMT 1 GetGlyphDirectory
1483 <001C60D8A8C9B7B5777C0EE4E79273272A8F439A6A25BA7D616354A104
4EFF56201B9DC06469C480907B360C3EBC929063E1C4079842E24AB6263051F8
7D6246B34BEBE39707F8C5DB39BB3DF65587909BCC0786899C08F359493644D9
B6C9A32E1AF1D359071857E64AECDB51D7391CFA580A79234E542A1080261B53
41AB889F36BB82B85540A1E46DE6F3750AEC7A1CEF38DEFE058AB79CA2A9A1DA
96E3C8C2E40163> |
!
end
end end
%ADOEndSubsetFont
WCDYEF+TimesNewRomanPS-ItalicMT [9.9751 0 0 -9.9751 0 0 ]msf
110.304 68.8318 mo
(\005\313)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiK-"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
102.951 67.0417 mo
106.531 67.0417 109.473 70.7504 109.473 75.2904 cv
0 0 0 .871855 cmyk
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<EH3#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
23.8529 120.818 mo
27.4337 120.818 30.3751 124.527 30.3751 129.067 cv
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wif?%~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1 /2 /CSD get_res sepcs
.852 sep
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 2458 88 <0001003cffe803c40389003c01974084083a193a021235314731543c6a16
79157a16ac15c500fa1509552e543b6a09034b1554005a150336003c1502
2128293902ab090139263f284f285f28f515f616f53907143b3c3c13090a
262738393a16170533153c1326271b3d2e33331f1b20141b1b202b073c00
060003031f133c1413133c180e0b1b133d28201b3c13100a8a096003b802
03401b3cad134043351340181934134015351f134f135f138f139f130513
b80234400c33251b402e012e252095121bb8ffc0b23a351bb8ffc0b31819
341bb8ffc0b31415341bb8ffc0b32c34341bb8ffc04019232834301b401b
a01b031b193d091b1713171b133d0a77c3182b2b103c3c2b2b2b4e10f45d
2b2b2b2b2b435c58b51b4023123f1bb8ffc0b3120b3f1bb8ffc0b116392b
2b2b59014df4ed5d10edf45d2b2b2be4edf4ed2b103c103c2b10c0c0003f
3c870e2e2b057d10c400183f3c3f870e2e2b0e7d10c40111123939111239
12173910c910c9870e103cc43130005d01715d5d5d5d5d435c5840181518
0b3915180c3900220c393b220c3930220c391e220c392b2b2b2b2b2b5901
5d0103061514163332363717060706232226353437363702062322263534
3713363534262322060727363736333216151407030615141633323e0237
3703c4ae270d0b1129531e4f533733272c0d104baae5622e402c5720110a
152a4a1f4b544036252f285e271915216ab17341160371fdac852312111f
6c177d3b262c2322384af8fee9d440314b9b01356f1b0c111e601674372b
2f25368bfebd8423131742e3c7d94c00>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/u 88 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[88{/.notdef}rp /X /Y 18{/.notdef}rp /l 5{/.notdef}rp /r 2{/.notdef}rp 
/u 2{/.notdef}rp /x /y 134{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
114.844 37.8194 mo
(u)sh
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<F)W)~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1.00071 lw
105.38 42.2957 mo
103.846 42.2957 102.567 41.0169 102.567 39.4822 cv
102.567 37.8837 105.125 36.6048 108.258 36.6048 cv
111.391 36.6048 113.949 37.8837 113.949 39.4822 cv
0 0 0 .871855 cmyk
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wk)21~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
104.038 43.5746 mo
105.38 42.2318 li
104.805 40.5693 li
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<HY=A~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1.50053 lw
99.4977 39.5461 mo
86.1336 36.6687 li
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!Wp3Sa~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
86.0697 36.7326 mo
88.3716 36.0292 li
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<Rn+L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<Rn+L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<Rn+L~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
86.0057 36.7326 mo
87.7961 38.2673 li
@
gsave
-134.151 755.326 mo
-124.112 755.326 li
-123.984 755.39 li
-124.112 755.518 li
-134.151 755.518 li
-134.215 755.39 li
-134.151 755.326 li
clp
-134.534 755.006 mo
-130.442 755.006 li
-130.442 759.099 li
-134.534 759.099 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!X/]0"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-130.442 755.006 mo
-126.35 755.006 li
-126.35 759.099 li
-130.442 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -266.063 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!X/]0"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-126.35 755.006 mo
-122.257 755.006 li
-122.257 759.099 li
-126.35 759.099 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -261.971 -618.338 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!WiB'!X/]0"~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
1 /2 /CSD get_res sepcs
.852 sep
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
2 104 41 <0001ffce00000559054c002f0148b515220f113e31b8ffc04083193a3405
0e150e9726a726bd04b511b72607010e0e00010e0f0f00072c0d0d5f081d
07161d171d1627682f2f61281d270648020261051d06150f141d15042501
251e241d25000f0f1e1d1e141d1d1e2f2e25022e0d0e0e1525021615081d
30281e1d1006a90007400702cf07df070207279200263026402650267026
05261a3100d40fba0301001e0345400c120f1d1f1d2f1d03801d011db801
73b630091d171d300ab80173b1fc182b2b103c2b2b4e10f45d71435c58b9
001dff80b326173f1db8ff80b328183f1db8ff80400b2d173f1d4018391d
4011392b2b2b2b2b59014de4fde44e10f6714de42f5d71e42b103c2b10c0
003f3c3f12392f3ced10ed870e2e2b057d10c4180010ed0110c05d0010ed
0110c02eedec0010f5012eedec0010f510ed0110c02eedec0010f5870510
3c7dc407103c3130015d2b2b010333323637330323363534262323030615
141617072137363736373637133635342626233721032336353426272623
029aa0b278773f268d280f516fb47620376b0cfde80d4e1a28131b25ef1d
1a334c0c041c64260b4939288b0504fde74a79fe123c273d43fe676d2425
28072525020c111d2980033163381a251225fea93e28424d100a>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/F 41 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/WCDYEE+TimesNewRomanPS-ItalicMT*1 
[70{/.notdef}rp /F 17{/.notdef}rp /X /Y 18{/.notdef}rp /l 5{/.notdef}rp 
/r 2{/.notdef}rp /u 2{/.notdef}rp /x /y 134{/.notdef}rp]
WCDYEE+TimesNewRomanPS-ItalicMT nf
WCDYEE+TimesNewRomanPS-ItalicMT*1 [9.9751 0 0 -9.9751 0 0 ]msf
91.1851 33.4072 mo
(F)sh
gsave
-134.215 755.39 mo
-134.215 683.326 li
-134.151 683.262 li
-134.023 683.326 li
-134.023 755.39 li
-134.151 755.518 li
-134.215 755.39 li
clp
-134.534 682.942 mo
-130.442 682.942 li
-130.442 687.035 li
-134.534 687.035 li
cp
0 0 0 .223392 cmyk
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -546.274 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 687.035 mo
-130.442 687.035 li
-130.442 691.127 li
-134.534 691.127 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -550.366 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 691.127 mo
-130.442 691.127 li
-130.442 695.219 li
-134.534 695.219 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -554.459 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 695.219 mo
-130.442 695.219 li
-130.442 699.312 li
-134.534 699.312 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -558.551 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 699.312 mo
-130.442 699.312 li
-130.442 703.404 li
-134.534 703.404 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -562.643 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 703.404 mo
-130.442 703.404 li
-130.442 707.497 li
-134.534 707.497 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -566.736 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 707.497 mo
-130.442 707.497 li
-130.442 711.589 li
-134.534 711.589 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -570.828 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 711.589 mo
-130.442 711.589 li
-130.442 715.681 li
-134.534 715.681 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -574.92 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 715.681 mo
-130.442 715.681 li
-130.442 719.774 li
-134.534 719.774 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -579.013 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 719.774 mo
-130.442 719.774 li
-130.442 723.866 li
-134.534 723.866 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -583.105 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 723.866 mo
-130.442 723.866 li
-130.442 727.958 li
-134.534 727.958 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -587.197 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 727.958 mo
-130.442 727.958 li
-130.442 732.051 li
-134.534 732.051 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -591.29 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 732.051 mo
-130.442 732.051 li
-130.442 736.143 li
-134.534 736.143 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -595.382 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 736.143 mo
-130.442 736.143 li
-130.442 740.235 li
-134.534 740.235 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -599.475 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 740.235 mo
-130.442 740.235 li
-130.442 744.328 li
-134.534 744.328 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -603.567 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 744.328 mo
-130.442 744.328 li
-130.442 748.42 li
-134.534 748.42 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -607.659 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 748.42 mo
-130.442 748.42 li
-130.442 752.513 li
-134.534 752.513 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -611.752 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
-134.534 752.513 mo
-130.442 752.513 li
-130.442 756.605 li
-134.534 756.605 li
cp
gsave
clp
[1 0 0 -1 135.621 136.669 ]ct
[4.09235 0 0 -4.09235 -270.156 -615.844 ]ct
<<
/T 1
/W 16 
/H 16 
/M[16 0 0 -16 0 16 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!<E6'!=&l9#~>
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
[/Pattern [/76684304.0 /76684500.0 /76684696.0 ]]
] del_res
/WCDYEF+TimesNewRomanPS-ItalicMT-Identity-H uf
/WCDYEF+TimesNewRomanPS-ItalicMT /CIDFont ur
/WCDYEE+TimesNewRomanPS-ItalicMT*1 uf
/WCDYEE+TimesNewRomanPS-ItalicMT uf
/PBAAAA+TimesNewRomanPS-ItalicMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
